#!/bin/bash
source settings.conf
function usage() {
    cat << EOF


    usage: $0 options
    OPTIONS:
     -h Show [H]elp (this message)
     -s [S]ettings file	(if not default)
     -F [F]ind templates on target node
     -b [B]uild (requires -x or -m)
     -R [R]emove/Detele VM/CT (requires -x or -m)
     -x l[x]c mode
     -m Virtual [m]achine mode
     -i vm[i]d
     -D [D]atacenter 
          (same as node for single node default install)
     -N [N]ode
          VM/CT Host Machine
     -H [H]ostname
     -P Password
	
	AutoProx is intended to speed up the creation of common nodes on Proxmox using the pvesh tool.
	Use the settings file for "standards" and use options for things that differ.
	You can call run.sh from your own script as many times and as many options as needed.

	Examples:

        Creates new LXC with defined hostname and password
	runme.sh -x -H newhost -P supersecure

        Looks for available template files on proxmox node
        runme.sh -F -d [datacenter]      


EOF
echo -e $ERROR
exit 1
}
function verbose(){
        # if verbose mode is active, display a nice message.
        if [[ $VERBOSE -eq 1 ]] ; then
                 echo -e "`date +%F_%T` $* \n"
        fi
}
function buildlxc(){
echo -e "Buidling vmid \e[34m$vmid\e[0m on $node1 in $mode mode."
ssh $datacenter "pvesh create /nodes/$node1/$mode \
        -vmid=$vmid \
        -hostname=$hostname \
        -password=$password \
        -ostemplate=$ostemplate \
        -memory=$memory \
        -swap=$swap \
        -storage=$n1_stor_des \
        -rootfs=$disk_size \
        -cpulimit=$lxc_cpulimit \
        -cpuunits=$lxc_cpuunits \
        -net0=$net0 \
        " > /tmp/build.output
verbose "$(cat /tmp/build.output)"
> /tmp/build.output
echo -e "\e[34mDone\e[0m"
}
function remove(){
echo -e "\e[31mWarning:\e[0m Detete Mode selected for VMID: \e[34m$vmid\e[0m"
ssh $datacenter "pvesh delete /nodes/$node1/$mode/$vmid" > /tmp/pve.out
cat /tmp/pve.out
echo -e "\n\e[34mDone\e[0m\n"
> /tmp/pve.out
}
function findTemplates(){
    # clear files to be used
        > /tmp/pve.out
        > /tmp/pve-list.out
        echo -e "\n\e[34m$datacenter\e[0m is the datacenter in use."
        echo -e "\e[34m$node1\e[0m is the target node."'\n'
        ssh $datacenter "pvesh ls nodes/$node1/storage " | cut -d' ' -f2 > \
         /tmp/pve.out
        cat /tmp/pve.out | while read -r line; do
          ssh -n $datacenter "pvesh get nodes/$node1/storage/$line/content/" \
          >> /tmp/pve-list.out
        done 
        echo -e "\e[34m      -Results-\e[0m"'\n' 
        echo -e "\e[34mFormat: [Storage]:[Type]/[Filename]\e[0m"
         cat /tmp/pve-list.out | grep volid | grep -v dump | grep -v disk | \
        sed -n -e 's/^.* : //p' | tr -d '"'
        echo -e '\n\e[34m~Done~\e[0m\n'
    # clean up our mess
        > /tmp/pve.out
        > /tmp/pve-list.out
exit 0
}

function parseopts () {
    while getopts "hs:Fbexmi:D:N:H:P:v" OPTION ; do
        case $OPTION in
         h) usage		;;
         s) source $OPTARG	;;
         F) o_find=1            ;;
         b) build=1             ;;
         e) remove=1            ;;
         x) lxc=1		;;
         m) vm=1		;;
         i) vmid=$OPTARG	;;
         D) datacenter=$OPTARG  ;;
         N) node1=$OPTARG       ;;
         H) hostname=$OPTARG	;;
         P) password=$OPTARG	;;
         v) VERBOSE=1
        esac
    done
### Verify Mode is set ###
if [[ $build -eq 1 ]]; then
    if [[ -z $lxc ]] ; then
        if [[ -z $vm ]] ; then
            ERROR="\e[31mPlease select LXC or VM mode. Note, these options are mutually exclusive.\e[0m"
	    usage
        fi
    fi
fi
if [[ $remove -eq 1 ]] ; then
    if [[ -z $lxc ]] ; then
        if [[ -z $vm ]] ; then
            ERROR="\n\e[31mPlease select LXC or VM mode. Note, these options are mutually exclusive.\e[0m"
            usage
        fi
    fi
fi
}
function main() {
if [[ $lxc -eq 1 ]] ; then mode=lxc; fi
if [[ $vm -eq 1 ]] ; then mode=qemu; fi
if [[ $build -eq 1 ]] ; then
        if [[ $lxc -eq 1 ]] ; then
		buildlxc
	fi
	if [[ $vm -eq 1 ]] ; then
		buildvm
	fi
fi
if [[ $remove -eq 1 ]] ; then
        remove
fi
if [[ $o_find -eq 1 ]] ; then
        findTemplates
fi
exit 0
}
parseopts $*
main
